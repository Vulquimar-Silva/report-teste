version: '3.8'

services:
  # --------------------------------------------------------------------------
  # PostgreSQL (Banco de Dados)
  # --------------------------------------------------------------------------
  db:
    image: postgres:13
    container_name: report-algar-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"  # Mapeia a porta 5432 do container para 5433 no host
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docker_network
    restart: always

  # --------------------------------------------------------------------------
  # Aplicação Flask (report-algar-web)
  # --------------------------------------------------------------------------
  web:
    build:
      context: .
    container_name: report-algar-web
    # Carrega as variáveis do .env e atribui ao container
    environment:
      - ENV=${ENV}
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - API_URL=${API_URL}
      - API_TYPE=${API_TYPE}
      - FAKE_API_URL=${FAKE_API_URL}
      - AKAMAI_API_URL=${AKAMAI_API_URL}
      - AKAMAI_API_TOKEN=${AKAMAI_API_TOKEN}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - GOOGLE_DRIVE_FOLDER=${GOOGLE_DRIVE_FOLDER}
      - GOOGLE_DRIVE_CREDENTIALS_PATH=${GOOGLE_DRIVE_CREDENTIALS_PATH}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - TOKEN_EXPIRATION_HOURS=${TOKEN_EXPIRATION_HOURS}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FILE_PATH=${LOG_FILE_PATH}
      - ETL_HOUR=${ETL_HOUR}
      - ETL_MINUTE=${ETL_MINUTE}
      - REPORT_DAYS=${REPORT_DAYS}
      - REPORT_HOUR=${REPORT_HOUR}
      - REPORT_MINUTE=${REPORT_MINUTE}
    volumes:
      - ./logs:/app/logs
    working_dir: /app
    command: python src/main.py
    ports:
      - "5000:5000"  # Mapeia a porta 5000 do container para 5000 no host
    depends_on:
      db:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      grafana:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - docker_network
    restart: always

  # --------------------------------------------------------------------------
  # Prometheus (Monitoramento)
  # --------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: report-algar-prometheus
    volumes:
      - prometheus_data:/etc/prometheus
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - docker_network
    restart: always

  # --------------------------------------------------------------------------
  # Grafana (Dashboard)
  # --------------------------------------------------------------------------
  grafana:
    image: grafana/grafana:latest
    container_name: report-algar-grafana
    ports:
      - "3100:3000"  # Acessar Grafana em localhost:3100
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - docker_network
    restart: always

# --------------------------------------------------------------------------
# Declaração de Volumes
# --------------------------------------------------------------------------
volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

# --------------------------------------------------------------------------
# Rede interna
# --------------------------------------------------------------------------
networks:
  docker_network:
    external: true
